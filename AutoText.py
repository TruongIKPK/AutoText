# Form implementation generated from reading ui file 'AutoText_v3.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import math
import threading
import time
from tkinter import filedialog
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog
from PyQt6.QtWidgets import QApplication
import pyautogui
import sys
import datetime
import tkinter as tk
from tkinter import messagebox
from tkinter import messagebox, simpledialog
from PyQt6.QtGui import QIcon
class Ui_Dialog(object):
    
    # Hàm đọc mở Open_File và đọc file để ghi vào textEdit
    def open_file_dialog(self):
        fileName, _ = QFileDialog.getOpenFileName(None, "Open File", "", "Text Files (*.txt);;All Files (*)")
        if fileName:
            with open(fileName, "r") as file:
                content = file.read()
                self.textEdit.setPlainText(content)
    # Hàm ghi Save_File và ghi file
    def save_file_dialog(self):
        fileName, _ = QFileDialog.getSaveFileName(None, "Save File", "", "Text Files (*.txt);;All Files (*)")
        if fileName:
            with open(fileName, "w") as file:
                content = self.textEdit.toPlainText()
                file.write(content)
    def exit_application(self):
        QApplication.quit()  
    
    def setupUi(self, Dialog):
        app_path = os.path.dirname(os.path.abspath(__file__))
        icon_path = os.path.join(app_path, "auto1.jpg")
        icon = QIcon(icon_path)
        Dialog.setWindowIcon(icon)
        Dialog.setObjectName("Dialog")
        Dialog.resize(811, 551)
        self.panel_Function = QtWidgets.QGroupBox(parent=Dialog)
        self.panel_Function.setGeometry(QtCore.QRect(110, 40, 681, 421))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.panel_Function.setFont(font)
        self.panel_Function.setObjectName("panel_Function")
        self.textEdit = QtWidgets.QTextEdit(parent=self.panel_Function)
        self.textEdit.setGeometry(QtCore.QRect(10, 20, 661, 391))
        self.textEdit.setObjectName("textEdit")
        self.groupBox_2 = QtWidgets.QGroupBox(parent=Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 480, 811, 71))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.btn_Start = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.btn_Start.setGeometry(QtCore.QRect(420, 20, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_Start.setFont(font)
        self.btn_Start.setObjectName("btn_Start")
        self.btn_Stop = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.btn_Stop.setGeometry(QtCore.QRect(660, 20, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_Stop.setFont(font)
        self.btn_Stop.setObjectName("btn_Stop")
        self.label_Speed = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_Speed.setGeometry(QtCore.QRect(10, 20, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_Speed.setFont(font)
        self.label_Speed.setObjectName("label_Speed")
        self.text_Speed = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.text_Speed.setGeometry(QtCore.QRect(70, 20, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.text_Speed.setFont(font)
        self.text_Speed.setObjectName("text_Speed")
        self.label_Starttime = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_Starttime.setGeometry(QtCore.QRect(170, 30, 91, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_Starttime.setFont(font)
        self.label_Starttime.setObjectName("label_Starttime")
        self.text_StartTime = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.text_StartTime.setGeometry(QtCore.QRect(260, 20, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.text_StartTime.setFont(font)
        self.text_StartTime.setObjectName("text_StartTime")
        self.btn_Pause = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.btn_Pause.setGeometry(QtCore.QRect(540, 20, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btn_Pause.setFont(font)
        self.btn_Pause.setObjectName("btn_Pause")
        self.panel_Options = QtWidgets.QFrame(parent=Dialog)
        self.panel_Options.setGeometry(QtCore.QRect(10, 50, 101, 91))
        self.panel_Options.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.panel_Options.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.panel_Options.setObjectName("panel_Options")
        self.btn_Open = QtWidgets.QPushButton(parent=self.panel_Options)
        self.btn_Open.setGeometry(QtCore.QRect(0, 0, 93, 28))
        self.btn_Open.setObjectName("btn_Open")
        self.btn_Save = QtWidgets.QPushButton(parent=self.panel_Options)
        self.btn_Save.setGeometry(QtCore.QRect(0, 30, 93, 28))
        self.btn_Save.setObjectName("btn_Save")
        self.btn_Exit = QtWidgets.QPushButton(parent=self.panel_Options)
        self.btn_Exit.setGeometry(QtCore.QRect(0, 60, 93, 28))
        self.btn_Exit.setObjectName("btn_Exit")
        self.label_2 = QtWidgets.QLabel(parent=Dialog)
        self.label_2.setGeometry(QtCore.QRect(340, 10, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_Starttime_2 = QtWidgets.QLabel(parent=Dialog)
        self.label_Starttime_2.setGeometry(QtCore.QRect(20, 170, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_Starttime_2.setFont(font)
        self.label_Starttime_2.setObjectName("label_Starttime_2")
        self.lineEdit = QtWidgets.QLineEdit(parent=Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(10, 200, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        # Thêm Các Sự Kiện
        self.btn_Open.clicked.connect(self.open_file_dialog)
        self.btn_Save.clicked.connect(self.save_file_dialog)
        self.btn_Exit.clicked.connect(self.exit_application)
        self.btn_Start.clicked.connect(self.start_button_clicked)
        self.btn_Stop.clicked.connect(self.stop_button_clicked)
        self.btn_Pause.clicked.connect(self.pause_resume_typewriting)
        
    def __init__(self):
        self.stop_typing = threading.Event()
        self.paused = False
    
    def tinh_so_ky_tu(self,string, so_tu_can_tinh):
        ky_tu_can_tinh = 0
        tu_hien_tai = 0
        index = 0

        while tu_hien_tai < so_tu_can_tinh and index < len(string):
            if string[index] == ' ' or string[index] == '\n':
                tu_hien_tai += 1  
            ky_tu_can_tinh += 1  
            index += 1
            if index == len(string):
                index = 0
                tu_hien_tai += 1
                ky_tu_can_tinh += 1     
        return ky_tu_can_tinh
        
    def pause_resume_typewriting(self):
        if not self.stop_typing.is_set():
            self.paused = not self.paused
            if self.paused:
                self.btn_Pause.setText("Resume")
            else:
                self.btn_Pause.setText("Pause")
                    
    def start_typewriting(self, input_string):
        desired_length = int(self.lineEdit.text()) * int(self.text_Speed.text())
        total_words = self.tinh_so_ky_tu(input_string,desired_length)
        delay = (int(self.lineEdit.text()) * 60) / (total_words + (0.99*total_words))
        rounded_number = math.ceil(delay * 10**3) / 10**3
        times = int(self.text_StartTime.text())
        time.sleep(times)
        typed_words = 0
        word_started = False
        remaining_string = list(input_string)  # Convert to list for efficient modification

        while typed_words < desired_length:
            if self.stop_typing.is_set():
                print("Stop")
                break

            while self.paused:
                time.sleep(times)

            char = remaining_string.pop(0)  # Remove first character from list
            pyautogui.typewrite(char)

            if char.isspace():
                if word_started:
                    typed_words += 1
                word_started = True

            if not remaining_string:  # If list is empty, reset it
                remaining_string = list(input_string)

            time.sleep(rounded_number)
           
    def start_button_clicked(self):
        input_string = self.textEdit.toPlainText()
        self.stop_typing.clear()
        threading.Thread(target=self.start_typewriting, args=(input_string,)).start()
        
    def stop_button_clicked(self):
        self.stop_typing.set()
          
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "AutoText"))
        self.panel_Function.setTitle(_translate("Dialog", "Text"))
        self.textEdit.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>Typing speed of this software depends on time and typing speed. And typing speed can be faster than the estimated time but still ensure enough words. Results from other software may fluctuate from 5-10 wpm.</body></html>"))
        self.btn_Start.setText(_translate("Dialog", "Start"))
        self.btn_Stop.setText(_translate("Dialog", "Stop"))
        self.label_Speed.setText(_translate("Dialog", "Speed"))
        self.text_Speed.setText(_translate("Dialog", "40"))
        self.label_Starttime.setText(_translate("Dialog", "Start Time "))
        self.text_StartTime.setText(_translate("Dialog", "5"))
        self.btn_Pause.setText(_translate("Dialog", "Pause"))
        self.btn_Open.setText(_translate("Dialog", "Open"))
        self.btn_Save.setText(_translate("Dialog", "Save"))
        self.btn_Exit.setText(_translate("Dialog", "Exit"))
        self.label_2.setText(_translate("Dialog", "AutoText"))
        self.label_Starttime_2.setText(_translate("Dialog", " Time "))
        self.lineEdit.setText(_translate("Dialog", "5"))


if __name__ == "__main__":
    import sys
    import datetime
    
    def check_password():
        root = tk.Tk()
        root.withdraw()  # Ẩn cửa sổ chính của tkinter

        password = simpledialog.askstring("Password", "Enter your password:", show='*')
        if password == "IKPKTruong":  # Thay "your_password" bằng mật khẩu bạn muốn
            return True
        else:
            messagebox.showerror("Error", "Incorrect password")
            return False

    # Kiểm tra ngày hiện tại
    current_date = datetime.date.today()
    end_date = datetime.date(2024, 5, 30)
    
    # if current_date > end_date:
    #     root = tk.Tk()
    #     root.withdraw()   
    #     messagebox.showwarning("Warning", "Out of time to experience")
    # else:
    if check_password():
        app = QtWidgets.QApplication(sys.argv)
        Dialog = QtWidgets.QDialog()
        ui = Ui_Dialog()
        ui.setupUi(Dialog)
        Dialog.show()
        sys.exit(app.exec())
